{"version":3,"sources":["toggle/actions.js","toggle/reducer.js","movies/actions.js","movies/reducer.js","rootReducer.js","toggle/Toggle.js","movies/Movie.js","movies/MoviesList.js","movies/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["toggleMessage","type","initialState","messageVisibility","getMovies","dispatch","a","url","process","fetch","res","json","movies","data","results","getMovie","id","console","log","movie","resetMovie","moviesLoaded","moviesLoadedAt","movieLoaded","state","action","Date","rootReducer","combineReducers","toggle","connect","bindActionCreators","onClick","Movie","to","Poster","src","poster_path","alt","title","styled","img","isLoaded","React","useEffect","MovieGrid","map","key","div","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","release_date","overview","props","middleware","logger","thunk","store","createStore","load","composeWithDevTools","applyMiddleware","save","App","className","role","aria-label","exact","path","component","MoviesList","MovieDetail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAGQ,SAASA,IACb,MAAO,CACHC,KAJsB,kBCC9B,IAAMC,EAAe,CACjBC,mBAAmB,G,yBCKVC,EAAY,WACrB,8CAAO,WAAeC,GAAf,mBAAAC,EAAA,6DACGC,EADH,8DACgEC,mCADhE,mGAGeC,MAAMF,GAHrB,cAGGG,EAHH,gBAIkBA,EAAIC,OAJtB,cAIGC,EAJH,yBAKIP,EAAS,CACZJ,KAbc,aAcdY,KAAMD,EAAOE,WAPd,2CAAP,mDAAM,IAaGC,EAAW,SAACC,GACrB,8CAAO,WAAeX,GAAf,mBAAAC,EAAA,6DACHW,QAAQC,IAAI,qBACNX,EAFH,6CAE+CS,EAF/C,oBAE6DR,mCAF7D,4BAIeC,MAAMF,GAJrB,cAIGG,EAJH,gBAKiBA,EAAIC,OALrB,cAKGQ,EALH,yBAMId,EAAS,CACZJ,KA3Ba,YA4BbY,KAAMM,KARP,2CAAP,mDAAM,IAaGC,EAAa,WAMtB,MAAO,CACHnB,KAvCmB,gBCGrBC,EAAe,CACjBU,OAAQ,GACRS,cAAc,EACdC,eAAgB,KAChBH,MAAO,GACPI,aAAa,GAGF,aAAyC,IAA/BC,EAA8B,uDAAtBtB,EAAcuB,EAAQ,uCAE/CxB,EAEAwB,EAFAxB,KACAY,EACAY,EADAZ,KAEJ,OAAQZ,GACJ,IDnBkB,aCoBd,OAAO,eACAuB,EADP,CAEIZ,OAAQC,EACRQ,cAAc,EACdC,eAAgB,IAAII,OAE5B,IDzBiB,YC0Bb,OAAO,eACAF,EADP,CAEIL,MAAON,EACPU,aAAa,IAErB,ID9BmB,cC+Bf,OAAO,eACAC,EADP,CAEIL,MAAO,GACPI,aAAa,IAErB,QACI,OAAOC,IC9BJG,EANKC,0BAAgB,CAChCC,OHAW,WAAwC,IAA/BL,EAA8B,uDAAtBtB,EAAcuB,EAAQ,uCAC1CxB,EAASwB,EAATxB,KACR,OAAQA,GACJ,IDRsB,iBCSlB,OAAO,eAAIuB,EAAX,CACIrB,mBAAoBqB,EAAMrB,oBAElC,QACI,OAAOqB,IGPfZ,SACAO,UCgBWW,eAXS,SAACN,GAAD,MAAY,CACnCrB,kBAAmBqB,EAAMK,OAAO1B,sBAGN,SAACE,GAAD,OAAc0B,6BACvC,CACU/B,iBAEVK,KAGayB,EAlBA,SAAC,GAAD,IAAG3B,EAAH,EAAGA,kBAAmBH,EAAtB,EAAsBA,cAAtB,OACd,6BACEG,GAAqB,mDAChB,4BAAQ6B,QAAShC,GAAjB,iB,uICFR,IAkBeiC,EARD,SAAC,GAAD,IAAGd,EAAH,EAAGA,MAAH,OACZ,kBAAC,IAAD,CAAMe,GAAE,WAAMf,EAAMH,KAClB,kBAAC,IAAD,CAAWA,GAAE,UAAKG,EAAMH,KACtB,kBAACmB,EAAD,CAAQC,IAAG,UAbG,kCAaH,OAAmBjB,EAAMkB,aAAeC,IAAKnB,EAAMoB,WAuBvDJ,EAASK,IAAOC,IAAV,K,4KCnCnB,IA6BeX,eAbS,SAACN,GAAD,MAAY,CAChCZ,OAAQY,EAAMZ,OAAOA,OACrB8B,SAAUlB,EAAMZ,OAAOS,aACvBC,eAAgBE,EAAMZ,OAAOU,mBAGN,SAACjB,GAAD,OAAc0B,6BACrC,CACI3B,aAEJC,KAGWyB,EA7BI,SAAC,GAAqD,IAAnDlB,EAAkD,EAAlDA,OAAQR,EAA0C,EAA1CA,UAAWsC,EAA+B,EAA/BA,SAAUpB,EAAqB,EAArBA,eAWlD,OATAqB,IAAMC,WAAU,WAET3B,QAAQC,IAAM,IAAIQ,KAAS,IAAIA,KAAKJ,MAC/BoB,GAAc,IAAIhB,KAAS,IAAIA,KAAKJ,GAF1B,QAGXL,QAAQC,IAAI,aACZd,OAER,CAACA,EAAWsC,EAAUpB,IAEhB,kBAACuB,EAAD,KACOjC,GAAUA,EAAOkC,KAAI,SAAC3B,GAAD,OAAW,kBAAC,EAAD,CAAO4B,IAAK5B,EAAMH,GAAIG,MAAOA,WAmBxE0B,EAAYL,IAAOQ,IAAV,K,4aC9Bf,IAiDelB,eAdS,SAACN,GAAD,MAAY,CACnCL,MAAOK,EAAMZ,OAAOO,MACpBuB,SAAUlB,EAAML,MAAMI,gBAGI,SAAClB,GAAD,OAC1B0B,6BACC,CACChB,WACAK,cAEDf,KAGayB,EA7CK,SAAC,GAAwD,IAAtDX,EAAqD,EAArDA,MAAO8B,EAA8C,EAA9CA,MAAOlC,EAAuC,EAAvCA,SAAUK,EAA6B,EAA7BA,WAAWG,EAAkB,EAAlBA,YAczD,OAbAoB,IAAMC,WACL,WACC7B,EAASkC,EAAMC,OAAOlC,MAEvB,CAAED,EAAUkC,EAAMC,OAAOlC,KAG1B2B,IAAMC,WACL,WACMrB,GAAaH,MAChB,CAACA,EAAYG,IAIhB,kBAAC4B,EAAD,CAAcC,SAAQ,UAlBF,mCAkBE,OAAqBjC,EAAMkC,gBAChD,kBAACC,EAAD,KACC,kBAAC,IAAD,CAAWtC,GAAE,UAAKG,EAAMH,KACvB,kBAACmB,EAAD,CAAQC,IAAG,UAtBI,kCAsBJ,OAAmBjB,EAAMkB,aAAeC,IAAKnB,EAAMoB,SAE/D,6BACEpB,EAAMoB,MAAQ,qCAAiB,kCAChC,4BAAKpB,EAAMoB,OACX,4BAAKpB,EAAMoC,cACX,2BAAIpC,EAAMqC,gBAuBTL,EAAeX,IAAOQ,IAAV,KAGC,SAACS,GAAD,OAAWA,EAAML,YAI9BE,EAAYd,IAAOQ,IAAV,KCjDTU,G,MAAa,CAAEC,IAAQC,MAEvBC,EAAQC,sBACVnC,EACAoC,iBACAC,8BAAoBC,kBAAe,WAAf,EAAmBP,EAAnB,QAA+BQ,sBA0BxCC,EAvBH,kBACX,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,IAAD,KACC,yBAAKO,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,IAAD,CAAMlC,GAAG,KACU,wBAAIkC,UAAU,YACV,0BAAMC,KAAK,MAAMC,aAAW,OAA5B,gBADJ,yBAGI,0BAAMD,KAAK,MAAMC,aAAW,OAA5B,mBAIxB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,OAAOC,UAAWE,SC9BfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCVN+B,IAASC,OAAO,gBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ef0823a.chunk.js","sourcesContent":["\nexport const TOGGLE_MESSAGE = 'TOGGLE_MESSAGE';\n\nexport  function toggleMessage() {\n    return {\n        type: TOGGLE_MESSAGE\n    }\n}\n","import { TOGGLE_MESSAGE } from './actions'\n\nconst initialState = {\n    messageVisibility: false,\n}\n\nexport default function(state = initialState, action) {\n    const { type } = action;\n    switch (type) {\n        case TOGGLE_MESSAGE:\n            return {...state,\n                messageVisibility: !state.messageVisibility\n            };\n        default:\n            return state;\n            \n    }\n}","\n\nexport const GET_MOVIES = 'GET_MOVIES';\nexport const GET_MOVIE = 'GET_MOVIE';\nexport const RESET_MOVIE = 'RESET_MOVIE';\n\n\n\nexport const getMovies = () => {\n    return async function(dispatch){\n        const url = `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`\n\n        const res = await fetch(url)\n        const movies = await res.json()\n        return dispatch({\n            type: GET_MOVIES,\n            data: movies.results,\n        });\n    }\n        \n}\n\nexport const getMovie = (id) => {\n    return async function(dispatch){\n        console.log('api call getMovie')\n        const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_MOVIEDB_API_KEY}&language=en-US`;\n\n        const res = await fetch(url)\n        const movie = await res.json()\n        return dispatch({\n            type: GET_MOVIE,\n            data: movie,\n        });\n    }    \n}\n\nexport const resetMovie = () => {\n    // return (dispatch) => {\n    //     return dispatch({\n    //         type: RESET_MOVIE,\n    //     });\n    // }\n    return {\n        type: RESET_MOVIE,\n      };\n}","import {\n    GET_MOVIES,\n    GET_MOVIE,\n    RESET_MOVIE\n} from './actions'\n\n\nconst initialState = {\n    movies: [],\n    moviesLoaded: false,\n    moviesLoadedAt: null,\n    movie: {},\n    movieLoaded: false,\n}\n\nexport default function (state = initialState, action) {\n    const {\n        type,\n        data\n    } = action;\n    switch (type) {\n        case GET_MOVIES:\n            return {\n                ...state,\n                movies: data,\n                moviesLoaded: true,\n                moviesLoadedAt: new Date(),\n            };\n        case GET_MOVIE:\n            return {\n                ...state,\n                movie: data,\n                movieLoaded: true,\n            };\n        case RESET_MOVIE:\n            return {\n                ...state,\n                movie: {},\n                movieLoaded: false,\n            };\n        default:\n            return state;\n\n    }\n}","import { combineReducers } from 'redux'\nimport toggle from './toggle/reducer'\nimport movies from './movies/reducer'\nimport movie from './movies/reducer'\n\nconst rootReducer = combineReducers({\n    toggle,\n    movies,\n    movie\n})\n\nexport default rootReducer;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleMessage } from './actions';\n\nimport { bindActionCreators } from 'redux';\n\nconst Toggle = ({ messageVisibility, toggleMessage }) => (\n\t<div>\n\t\t{messageVisibility && <p>redux action toggled</p>}\n        <button onClick={toggleMessage}>Toggle Me</button>\n\t</div>\n);\n\nconst mapStateToProps = (state) => ({\n\tmessageVisibility: state.toggle.messageVisibility\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n\t\t{\n            toggleMessage,\n\t\t},\n\t\tdispatch\n\t);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toggle);\n","\nimport  React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\n\n// type Props = {\n//     movie:  {\n//         id: string,\n//         title: string,\n//         poster_path: string\n//      }\n//  }\n\nconst Movie = ({ movie }) => (\n  <Link to={`/${movie.id}`}>\n    <Overdrive id={`${movie.id}`}>\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n    </Overdrive>\n  </Link>\n);\n\nexport default Movie;\n\nMovie.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\n// Movie.propTypes = {\n//     movie: PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       poster_path: PropTypes.string.isRequired,\n//       title: PropTypes.string.isRequired,\n//     }).isRequired,\n//   };\n  \n\n\nexport const Poster = styled.img`\n  box-shadow: 0 0 35px black;\n`;\n","\nimport  React from \"react\";\nimport styled from 'styled-components';\nimport Movie from './Movie';\nimport { connect } from 'react-redux';\nimport { getMovies } from './actions';\nimport { bindActionCreators } from 'redux';\n\nconst MoviesList = ({ movies, getMovies, isLoaded, moviesLoadedAt }) => {\n    \n\tReact.useEffect(() => {\n        const oneHour =60*60*1000;\n        console.log(  new Date() - new Date(moviesLoadedAt) )\n        if (!isLoaded || ((new Date() - new Date(moviesLoadedAt) ) > oneHour)){\n            console.log('getMovies')\n            getMovies();\n        }\n\t}, [getMovies, isLoaded, moviesLoadedAt]);\n\n\treturn  (<MovieGrid>\n                {movies && movies.map((movie) => <Movie key={movie.id} movie={movie} />)}\n            </MovieGrid>);\n};\n\nconst mapStateToProps = (state) => ({\n    movies: state.movies.movies,\n    isLoaded: state.movies.moviesLoaded,\n    moviesLoadedAt: state.movies.moviesLoadedAt,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators(\n    {\n        getMovies\n    },\n    dispatch\n);\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MoviesList);\n\nconst MovieGrid = styled.div`\n\tdisplay: grid;\n\tpadding: 1rem;\n\tgrid-template-columns: repeat(6, 1fr);\n\tgrid-row-gap: 1rem;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Overdrive from 'react-overdrive';\nimport { Poster } from './Movie';\n\nimport { connect } from 'react-redux';\nimport { getMovie, resetMovie } from './actions';\nimport { bindActionCreators } from 'redux';\n\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154';\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280';\n\n// match comes from React Router\nconst MovieDetail = ({ movie, match, getMovie, resetMovie,movieLoaded }) => {\n\tReact.useEffect(\n\t\t() => {\n\t\t\tgetMovie(match.params.id); // dispatches a thunk\n\t\t},\n\t\t[ getMovie, match.params.id ]\n\t);\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tif (!movieLoaded) resetMovie(); // dispatches a thunk\n\t\t}, [resetMovie, movieLoaded]\n\t);\n\n\treturn (\n\t\t<MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\n\t\t\t<MovieInfo>\n\t\t\t\t<Overdrive id={`${movie.id}`}>\n\t\t\t\t\t<Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\n\t\t\t\t</Overdrive>\n\t\t\t\t<div>\n\t\t\t\t\t{movie.title ? <h1>Hello</h1> : <h1>Hi</h1>}\n\t\t\t\t\t<h1>{movie.title}</h1>\n\t\t\t\t\t<h3>{movie.release_date}</h3>\n\t\t\t\t\t<p>{movie.overview}</p>\n\t\t\t\t</div>\n\t\t\t</MovieInfo>\n\t\t</MovieWrapper>\n\t);\n};\n\nconst mapStateToProps = (state) => ({\n\tmovie: state.movies.movie,\n\tisLoaded: state.movie.movieLoaded\n});\n\nconst mapDispatchToProps = (dispatch) =>\n\tbindActionCreators(\n\t\t{\n\t\t\tgetMovie,\n\t\t\tresetMovie\n\t\t},\n\t\tdispatch\n\t);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieDetail);\n\nconst MovieWrapper = styled.div`\n\tposition: relative;\n\tpadding-top: 50vh;\n\tbackground: url(${(props) => props.backdrop}) no-repeat;\n\tbackground-size: cover;\n`;\n\nconst MovieInfo = styled.div`\n\tbackground: white;\n\ttext-align: left;\n\tpadding: 2rem 10%;\n\tdisplay: flex;\n\t> div {\n\t\tmargin-left: 20px;\n\t}\n\timg {\n\t\tposition: relative;\n\t\ttop: -5rem;\n\t}\n`;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { save, load } from 'redux-localstorage-simple'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootReducer from './rootReducer';\n\nimport Toggle from './toggle/Toggle';\nimport MoviesList from './movies/MoviesList';\nimport MovieDetail from './movies/MovieDetail';\n\nimport './App.css';\n\nconst middleware = [ logger, thunk ];\n\nconst store = createStore(\n    rootReducer, \n    load(),\n    composeWithDevTools(applyMiddleware(...middleware, save())),\n);\n\nconst App = () => (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<Link to=\"/\">\n                        <h1 className=\"App-logo\">\n                            <span role='img' aria-label='xxx'>&#127775;</span>\n                            Mike's Movie Data Base\n                            <span role='img' aria-label='xxx'>&#127775;</span>\n                         </h1>\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n\t\t\t\t<Toggle />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={MoviesList} />\n\t\t\t\t\t<Route path=\"/:id\" component={MovieDetail} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t</Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\n\nimport * as React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}